buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath(
        [group: "org.github.ngbinh.scalastyle", name: "gradle-scalastyle-plugin_2.11", version: "0.7.2"]
    )
  }
}

apply plugin: 'scala'
apply plugin: 'scalaStyle'
apply plugin: 'project-report'
apply plugin: 'application'
apply plugin: 'base'

def scalaMajor = "2.11"
def scalaMinor = "8"
def sparkVersion = "2.2.0"

group 'com.franklin.samples'
mainClassName = "com.franklin.samples.Main"

repositories {
  mavenCentral()
  maven {
    url 'https://dl.bintray.com/spark-packages/maven/'
  }
}

dependencies {
  compile(
      [group: 'org.scala-lang', name: 'scala-compiler', version: "$scalaMajor.$scalaMinor"],
      [group: 'org.scala-lang', name: 'scala-library', version: "$scalaMajor.$scalaMinor"],
      [group: 'org.apache.spark', name: "spark-core_$scalaMajor", version: sparkVersion],
      [group: 'org.apache.spark', name: "spark-sql_$scalaMajor", version: sparkVersion],
      [group: 'com.beust', name: "jcommander", version: '1.72']
  )

  testCompile(
      [group: 'junit', name: 'junit', version: '4.12'],
      [group: 'org.specs2', name: "specs2-core_$scalaMajor", version: '3.8.5.1'],
      [group: 'org.specs2', name: "specs2-junit_$scalaMajor", version: '3.8.5.1']
  )
}

jar {
  baseName = project.name
  manifest {
    attributes("Main-Class": mainClassName)
  }
}

ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false

tasks.withType(ScalaCompile) {
  scalaCompileOptions.additionalParameters = ["-unchecked", "-deprecation", "-feature", "-Xfatal-warnings", "-encoding", "utf8"]
}

scalaStyle {
  configLocation = "$rootDir/project/scalastyle_config.xml"
  includeTestSourceDirectory = true
  source = "src/main/scala"
  testSource = "src/test/scala"
}

// Run ScalaStyle with the tests
check {
  dependsOn "scalaStyle"
}

// specs2 console logging
test {
  testLogging.showStandardStreams = true
  systemProperty "specs2.commandline", "console"
}

// Generating gradle wrapper so people don't have to have the Gradle version preinstalled
task wrapper(type: Wrapper) {
  gradleVersion = "3.1"
}

task runSpark(dependsOn: 'classes', type: JavaExec) {
  classpath = files(configurations.compile) + sourceSets.main.runtimeClasspath
  if (project.hasProperty('pargs')) {
    println pargs.split(" ")
    args(pargs.split(" "))
  }
  main = 'com.franklin.sample.advertising.Main'
}

clean {
  delete "$projectDir/target"
}

test {
  dependsOn 'cleanTest'
}


